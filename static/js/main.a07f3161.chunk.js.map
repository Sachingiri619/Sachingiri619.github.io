{"version":3,"sources":["logo.svg","push-notification.js","App.js","users.js","contact.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","askForPermissioToReceiveNotifications","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","messaging","token","wrap","_context","prev","next","firebase","onMessage","payload","console","log","Notification","requestPermission","getToken","sent","axios","method","url","params","data","then","response","catch","error","abrupt","t0","stop","apply","this","arguments","App","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initializeApp","messagingSenderId","navigator","serviceWorker","register","registration","useServiceWorker","react_default","createElement","className","Component","Users","React","Contact","onSubmit","_this","history","push","placeholder","type","onClick","Boolean","window","location","hostname","match","routing","react_router_dom","to","react_router","exact","path","component","ReactDOM","render","document","getElementById","ready","unregister"],"mappings":"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","file":"static/js/main.a07f3161.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase';\nimport axios from \"axios\";\n\nexport const initializeFirebase = () => {\n  firebase.initializeApp({\n    messagingSenderId: '248890543145' // troque pelo seu sender id \n  });\n\n  // use other service worker\n   navigator.serviceWorker\n    .register('.//firebase-messaging-sw.js')\n    .then((registration) => {\n     firebase.messaging().useServiceWorker(registration);\n   });\n}\n\nexport const askForPermissioToReceiveNotifications = async () => {\n  try {\n\n    const messaging = firebase.messaging();\n    messaging.onMessage((payload) => {\n      console.log('Message received. ', payload);\n      var notification = new Notification(\"Hi there!\");\n    });\n    await messaging.requestPermission();\n    const token = await messaging.getToken();\n    console.log('user token: ', token);\n    await axios({\n      method: 'post',\n      url: 'http://198.168.5.16:8799/register',\n      params: {\n          data: token\n        }\n  }).then(response => {\n    console.log(response);\n  }).catch(error => {\n      console.log(error);\n      return \"\";\n  });\n    return token;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { askForPermissioToReceiveNotifications } from './push-notification';\nimport firebase from 'firebase';\nimport axios from \"axios\";\nimport { initializeFirebase } from './push-notification';\n//import index from './server/index'\n//var axios = require('axios');\n/*var https = require(\"https\");\n\nvar fs = require(\"fs\");\n\n\nvar express = require(\"express\");\n\n\nvar app = express();\n\n/*const httpsAgent = new https.Agent({\n  rejectUnauthorized: false,\n  cert: fs.readFileSync(\"merokirana.com.crt\"),\n  key: fs.readFileSync(\"meerokirana.key\"),\n})\n\naxios.get('/', { httpsAgent })\n*/\n/*var options = {\n  key: fs.readFileSync('src/merokirana.key'),\n  cert: fs.readFileSync('src/merokirana.com.crt')\n};\n\nvar httpsAgent = require('https').createServer(options, function (req, res) {\n  //res.writeHead(200);\n // res.end(\"hello world\\n\");\n}).listen(3000);\naxios.get('/', { httpsAgent })*/\n/*const axios = require('axios');\nvar httpsAgent = require('https-agent');\nvar fs = require('fs');\n\nvar agent = httpsAgent({\n  pfx: fs.readFileSync('certificate.pfx'),\n  passphrase: 'client'\n});\n//var button = document.querySelector(\".pokemon-button\");\n//button.addEventListener(\"click\", getPokemonData); \n\n \n  \n  function myFunction() {\n    document.getElementById(\"demo\").style.color = \"red\";\n  }*/\n\n  /*const fs = require('fs')\n    , path = require('./')\n    , certFile = path.resolve('payment','ssl/merokirana.com.crt')\n    , keyFile = path.resolve('payment', 'ssl/merokirana.key')\n    , request = require('request');\n\n    const options = {\n      url: 'https://nabiltest.compassplus.com:8444/Exec',\n      cert: fs.readFileSync(certFile),\n      key: fs.readFileSync(keyFile),\n  };\n  request.get(options);*/\nclass App extends Component {\n /* getComponent(event) {\n    \n  var xmlBodyStr = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'+\n  +'<TKKPG>'+\n  +'<Request>'+\n  +'<Operation>CreateOrder</Operation>'+\n  +'<Language>RU</Language>'+\n  +'<Order>'+\n  +'<OrderType>Purchase</OrderType>'+\n  +'<Merchant>NABIL106586</Merchant>'+\n  +'<Amount>123456</Amount>'+\n  +'<Currency>840</Currency>'+\n  +'<Description>xxxxxxxx</Description>'+\n  +'<ApproveURL>/testshopPageReturn.jsp</ApproveURL>'+\n  +'<CancelURL>/testshopPageReturn.jsp</CancelURL>'+\n  +'<DeclineURL>/testshopPageReturn.jsp</DeclineURL>'+\n  +'</Order>'+\n  +'</Request>'+\n  +'</TKKPG>';\n  var config = {\n   headers: {'Content-Type': 'text/xml'}\n  };\n  \n      axios.post('https://nabiltest.compassplus.com:8444/Exec', xmlBodyStr, config).then(res => {\n      res.send(\"<h1>hello<h2>\");\n      }).catch();\n       \n      \n      console.log('li item clicked!');\n}*/\n\nconstructor(props) {\n  super(props);\n // this.handleClick()\n}\nhandleClick() {\n  \n // {askForPermissioToReceiveNotifications};\n  console.log('Click happened');\n}\n\nasync componentDidMount() {\n  initializeFirebase()\n  askForPermissioToReceiveNotifications()\n  \n}\n/**\n * \n */\n  render() {\n    return (\n      <div className=\"App\">\n        \n      \n\n\n     \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","import React from 'react'\r\n\r\nclass Users extends React.Component {\r\n  render() {\r\n    return <h1>Users</h1>\r\n  }\r\n}\r\n\r\nexport default Users\r\n","import React from 'react'\r\n\r\nclass Contact extends React.Component {\r\n    onSubmit = () => {\r\n      this.props.history.push('/users')\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form>\r\n          <input placeholder=\"name\" type=\"name\" />\r\n          <input placeholder=\"email\" type=\"email\" />\r\n          <button onClick={this.onSubmit}>Submit</button>\r\n        </form>\r\n      )\r\n    }\r\n  }\r\n  \r\n\r\nexport default Contact","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Users from './users';\nimport Contact from './contact';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeFirebase } from './push-notification';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\n\n\nconst routing = (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/build/users\">Users</Link>\n          </li>\n          <li>\n            <Link to=\"/build/contact\">Contact</Link>\n          </li>\n        </ul>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/build/users\" component={Users} />\n        <Route path=\"/build/contact\" component={Contact} />\n      </div>\n    </Router>\n  )\n  \n  ReactDOM.render(routing, document.getElementById('root'))\n//ReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(routing, document.getElementById('root'))\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}