{"version":3,"sources":["logo.svg","push-notification.js","App.js","users.js","contact.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","axios","require","askForPermissioToReceiveNotifications","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","tokenString","messaging","token","wrap","_context","prev","next","firebase","requestPermission","getToken","sent","console","log","method","url","params","data","then","response","catch","error","abrupt","t0","stop","apply","this","arguments","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","s","initializeApp","messagingSenderId","onMessage","payload","Notification","react_default","createElement","className","Component","Users","React","Contact","onSubmit","history","push","placeholder","type","onClick","Boolean","window","location","hostname","match","routing","react_router_dom","to","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1aea1bc0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from 'firebase';\nvar axios = require('axios');\n\nexport const initializeFirebase = () => {\n  firebase.initializeApp({\n    messagingSenderId: '248890543145' // troque pelo seu sender id \n  });\n /* navigator.serviceWorker\n      .register('/firebase-messaging-sw.js')\n      .then((registration) => {\n        firebase.messaging().useServiceWorker(registration);\n      });*/\n      const messaging = firebase.messaging();\n      messaging.onMessage((payload) => {\n        console.log('Message received. ', payload);\n        var notification = new Notification(payload);\n        // ...\n      });\n}\n  \n \n\n\nexport const askForPermissioToReceiveNotifications = async () => {\n  var tokenString;\n  try {\n\n    const messaging = firebase.messaging();\n\n    await messaging.requestPermission();\n    const token = await messaging.getToken();\n    console.log('user token: ', token);\ntokenString = token;\nconsole.log(tokenString)\n\nawait axios({\n  method: 'post',\n  url: 'http://192.168.0.101:8080/register',\n  params: {\n    data: tokenString\n  },\n  //responseType: 'blob',\n  //filename: 'sachin'\n  //data: {filename:'sachin'},\n /* headers: {\n  'content-type': `; boundary=${formData._boundary}`,\n  }*/\n//  headers: {'Authorization': 'key=AAAAOfMITCk:APA91bEH226alRbEkqDeUhtq0DFuH49Bs60cYSMGRLLYvZj26lfirIbWd4aSUwHoquIYRfFhyjTtWaKch22Rg2aAmSHcrmPZS7QIwQLixzXlBdYa2tnYtNtzBQ6AdaBnI0eLF1IG88p_'},\n\n}).then(response => {\n//daresponse.data);\n/*     let  blob = new Blob([dataArray[0],response.data], {\n      encoding: \"UTF-8\"\n     // type: \"text/csv;charset=UTF-8\"\n    });\n    console.log(blob.size)\n  let blobUrl = window.URL.createObjectURL(blob);\n\n  console.log(\"returned blob data\",blob);\n  console.log(\"url of the file for browser\",blobUrl);\n  const link = document.createElement('a');\n\nconsole.log(\"Link is converted to blob URL of download file :\", response);\n\nlink.href = blobUrl;\nvar res = filePath.split(\"/\");\nconsole.log(res.slice(-1).pop());\nlink.setAttribute('download', res.slice(-1).pop());\nlink.click();\n  \n  */\n  //not returning a url now\n  // planning to put a new code here to automatically start downloading file\n  //using js to create a dummy element and dummy click\n  \n  //return blobUrl\n  console.log(\"hellooo\");\nconsole.log(response.data);\n  \n}).catch(error => {\n  console.log(error);\n  return \"\";\n});\n//axios.defaults.headers.common['Authorization'] = 'key=AAAAOfMITCk:APA91bEH226alRbEkqDeUhtq0DFuH49Bs60cYSMGRLLYvZj26lfirIbWd4aSUwHoquIYRfFhyjTtWaKch22Rg2aAmSHcrmPZS7QIwQLixzXlBdYa2tnYtNtzBQ6AdaBnI0eLF1IG88p_';\n    return token;\n    \n  } catch (error) {\n    console.error(error);\n  }\n  \n  \n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { initializeFirebase,askForPermissioToReceiveNotifications } from './push-notification';\nimport firebase from 'firebase';\n//import index from './server/index'\nvar axios = require('axios');\n/*var https = require(\"https\");\n\nvar fs = require(\"fs\");\n\n\nvar express = require(\"express\");\n\n\nvar app = express();\n\n/*const httpsAgent = new https.Agent({\n  rejectUnauthorized: false,\n  cert: fs.readFileSync(\"merokirana.com.crt\"),\n  key: fs.readFileSync(\"meerokirana.key\"),\n})\n\naxios.get('/', { httpsAgent })\n*/\n/*var options = {\n  key: fs.readFileSync('src/merokirana.key'),\n  cert: fs.readFileSync('src/merokirana.com.crt')\n};\n\nvar httpsAgent = require('https').createServer(options, function (req, res) {\n  //res.writeHead(200);\n // res.end(\"hello world\\n\");\n}).listen(3000);\naxios.get('/', { httpsAgent })*/\n/*const axios = require('axios');\nvar httpsAgent = require('https-agent');\nvar fs = require('fs');\n\nvar agent = httpsAgent({\n  pfx: fs.readFileSync('certificate.pfx'),\n  passphrase: 'client'\n});\n//var button = document.querySelector(\".pokemon-button\");\n//button.addEventListener(\"click\", getPokemonData); \n\n \n  \n  function myFunction() {\n    document.getElementById(\"demo\").style.color = \"red\";\n  }*/\n\n  /*const fs = require('fs')\n    , path = require('./')\n    , certFile = path.resolve('payment','ssl/merokirana.com.crt')\n    , keyFile = path.resolve('payment', 'ssl/merokirana.key')\n    , request = require('request');\n\n    const options = {\n      url: 'https://nabiltest.compassplus.com:8444/Exec',\n      cert: fs.readFileSync(certFile),\n      key: fs.readFileSync(keyFile),\n  };\n  request.get(options);*/\nclass App extends Component {\n /* getComponent(event) {\n    \n  var xmlBodyStr = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>'+\n  +'<TKKPG>'+\n  +'<Request>'+\n  +'<Operation>CreateOrder</Operation>'+\n  +'<Language>RU</Language>'+\n  +'<Order>'+\n  +'<OrderType>Purchase</OrderType>'+\n  +'<Merchant>NABIL106586</Merchant>'+\n  +'<Amount>123456</Amount>'+\n  +'<Currency>840</Currency>'+\n  +'<Description>xxxxxxxx</Description>'+\n  +'<ApproveURL>/testshopPageReturn.jsp</ApproveURL>'+\n  +'<CancelURL>/testshopPageReturn.jsp</CancelURL>'+\n  +'<DeclineURL>/testshopPageReturn.jsp</DeclineURL>'+\n  +'</Order>'+\n  +'</Request>'+\n  +'</TKKPG>';\n  var config = {\n   headers: {'Content-Type': 'text/xml'}\n  };\n  \n      axios.post('https://nabiltest.compassplus.com:8444/Exec', xmlBodyStr, config).then(res => {\n      res.send(\"<h1>hello<h2>\");\n      }).catch();\n       \n      \n      console.log('li item clicked!');\n}*/\n\nconstructor(props) {\n  super(props);\n // this.handleClick()\n \n    this.state = {token: \"\"};\n}\nasync getUsers2(s) {\n \n  \n}\nasync componentDidMount() {\n  initializeFirebase();\n  askForPermissioToReceiveNotifications();\n  //this.setState({token: tokenString});\n  //console.log(this.state)\n // this.getUsers2();\n}\ncomponentDidUpdate() {\n  //this.getUsers2(this.state.token);\n}\nhandleClick() {\n  \n // {askForPermissioToReceiveNotifications};\n  console.log('Click happened');\n}\n  render() {\n    return (\n      <div className=\"App\">\n        \n      \n\n     \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\r\n\r\nclass Users extends React.Component {\r\n  render() {\r\n    return <h1>Users</h1>\r\n  }\r\n}\r\n\r\nexport default Users","import React from 'react'\r\n\r\nclass Contact extends React.Component {\r\n    onSubmit = () => {\r\n      this.props.history.push('/users')\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form>\r\n          <input placeholder=\"name\" type=\"name\" />\r\n          <input placeholder=\"email\" type=\"email\" />\r\n          <button onClick={this.onSubmit}>Submit</button>\r\n        </form>\r\n      )\r\n    }\r\n  }\r\n  \r\n\r\nexport default Contact","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nimport firebase from 'firebase';\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\nexport const inicializarFirebase = () => {\n \n  \n  \n //navigator.useServiceWorker\n navigator.serviceWorker\n  .register('.//firebase-messaging-sw.js')\n  .then((registration) => {\n    firebase.messaging().useServiceWorker(registration);\n  });\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Users from './users';\nimport Contact from './contact';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeFirebase , inicializarFirebase } from './push-notification';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\n\n\nconst routing = (\n    <Router>\n      <div>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/build/users\">Users</Link>\n          </li>\n          <li>\n            <Link to=\"/build/contact\">Contact</Link>\n          </li>\n        </ul>\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/build/users\" component={Users} />\n        <Route path=\"/build/contact\" component={Contact} />\n      </div>\n    </Router>\n  )\n  \n  ReactDOM.render(routing, document.getElementById('root'))\n//ReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(routing, document.getElementById('root'))\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n//initializeFirebase(); \n//serviceWorker.inicializarFirebase();\n//inicializarFirebase();\n"],"sourceRoot":""}